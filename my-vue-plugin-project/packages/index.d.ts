import Vue from 'vue';
declare const _default: {
    length: number;
    toString(): string;
    toLocaleString(): string;
    pop(): import("./types/video-player").InstallableComponent;
    push(...items: import("./types/video-player").InstallableComponent[]): number;
    concat(...items: ConcatArray<import("./types/video-player").InstallableComponent>[]): import("./types/video-player").InstallableComponent[];
    concat(...items: (import("./types/video-player").InstallableComponent | ConcatArray<import("./types/video-player").InstallableComponent>)[]): import("./types/video-player").InstallableComponent[];
    join(separator?: string): string;
    reverse(): import("./types/video-player").InstallableComponent[];
    shift(): import("./types/video-player").InstallableComponent;
    slice(start?: number, end?: number): import("./types/video-player").InstallableComponent[];
    sort(compareFn?: (a: import("./types/video-player").InstallableComponent, b: import("./types/video-player").InstallableComponent) => number): import("./types/video-player").InstallableComponent[];
    splice(start: number, deleteCount?: number): import("./types/video-player").InstallableComponent[];
    splice(start: number, deleteCount: number, ...items: import("./types/video-player").InstallableComponent[]): import("./types/video-player").InstallableComponent[];
    unshift(...items: import("./types/video-player").InstallableComponent[]): number;
    indexOf(searchElement: import("./types/video-player").InstallableComponent, fromIndex?: number): number;
    lastIndexOf(searchElement: import("./types/video-player").InstallableComponent, fromIndex?: number): number;
    every<S extends import("./types/video-player").InstallableComponent>(predicate: (value: import("./types/video-player").InstallableComponent, index: number, array: import("./types/video-player").InstallableComponent[]) => value is S, thisArg?: any): this is S[];
    every(predicate: (value: import("./types/video-player").InstallableComponent, index: number, array: import("./types/video-player").InstallableComponent[]) => unknown, thisArg?: any): boolean;
    some(predicate: (value: import("./types/video-player").InstallableComponent, index: number, array: import("./types/video-player").InstallableComponent[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: import("./types/video-player").InstallableComponent, index: number, array: import("./types/video-player").InstallableComponent[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: import("./types/video-player").InstallableComponent, index: number, array: import("./types/video-player").InstallableComponent[]) => U, thisArg?: any): U[];
    filter<S_1 extends import("./types/video-player").InstallableComponent>(predicate: (value: import("./types/video-player").InstallableComponent, index: number, array: import("./types/video-player").InstallableComponent[]) => value is S_1, thisArg?: any): S_1[];
    filter(predicate: (value: import("./types/video-player").InstallableComponent, index: number, array: import("./types/video-player").InstallableComponent[]) => unknown, thisArg?: any): import("./types/video-player").InstallableComponent[];
    reduce(callbackfn: (previousValue: import("./types/video-player").InstallableComponent, currentValue: import("./types/video-player").InstallableComponent, currentIndex: number, array: import("./types/video-player").InstallableComponent[]) => import("./types/video-player").InstallableComponent): import("./types/video-player").InstallableComponent;
    reduce(callbackfn: (previousValue: import("./types/video-player").InstallableComponent, currentValue: import("./types/video-player").InstallableComponent, currentIndex: number, array: import("./types/video-player").InstallableComponent[]) => import("./types/video-player").InstallableComponent, initialValue: import("./types/video-player").InstallableComponent): import("./types/video-player").InstallableComponent;
    reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: import("./types/video-player").InstallableComponent, currentIndex: number, array: import("./types/video-player").InstallableComponent[]) => U_1, initialValue: U_1): U_1;
    reduceRight(callbackfn: (previousValue: import("./types/video-player").InstallableComponent, currentValue: import("./types/video-player").InstallableComponent, currentIndex: number, array: import("./types/video-player").InstallableComponent[]) => import("./types/video-player").InstallableComponent): import("./types/video-player").InstallableComponent;
    reduceRight(callbackfn: (previousValue: import("./types/video-player").InstallableComponent, currentValue: import("./types/video-player").InstallableComponent, currentIndex: number, array: import("./types/video-player").InstallableComponent[]) => import("./types/video-player").InstallableComponent, initialValue: import("./types/video-player").InstallableComponent): import("./types/video-player").InstallableComponent;
    reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: import("./types/video-player").InstallableComponent, currentIndex: number, array: import("./types/video-player").InstallableComponent[]) => U_2, initialValue: U_2): U_2;
    find<S_2 extends import("./types/video-player").InstallableComponent>(predicate: (this: void, value: import("./types/video-player").InstallableComponent, index: number, obj: import("./types/video-player").InstallableComponent[]) => value is S_2, thisArg?: any): S_2;
    find(predicate: (value: import("./types/video-player").InstallableComponent, index: number, obj: import("./types/video-player").InstallableComponent[]) => unknown, thisArg?: any): import("./types/video-player").InstallableComponent;
    findIndex(predicate: (value: import("./types/video-player").InstallableComponent, index: number, obj: import("./types/video-player").InstallableComponent[]) => unknown, thisArg?: any): number;
    fill(value: import("./types/video-player").InstallableComponent, start?: number, end?: number): import("./types/video-player").InstallableComponent[];
    copyWithin(target: number, start: number, end?: number): import("./types/video-player").InstallableComponent[];
    entries(): IterableIterator<[number, import("./types/video-player").InstallableComponent]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<import("./types/video-player").InstallableComponent>;
    includes(searchElement: import("./types/video-player").InstallableComponent, fromIndex?: number): boolean;
    flatMap<U_3, This = undefined>(callback: (this: This, value: import("./types/video-player").InstallableComponent, index: number, array: import("./types/video-player").InstallableComponent[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
    flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
    [Symbol.iterator](): IterableIterator<import("./types/video-player").InstallableComponent>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
    install: {
        (VueInstance: import("vue").VueConstructor<Vue<Record<string, any>, Record<string, any>, never, never, (event: string, ...args: any[]) => Vue<Record<string, any>, Record<string, any>, never, never, any>>>): void;
        installed: boolean;
    };
};
export default _default;
